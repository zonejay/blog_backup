import{_ as a,o as p,c as l,k as s,a as o,t as e,Q as r}from"./chunks/framework.b51cef28.js";const c="/assets/1644201796767.ee4b33b2.png",t="/assets/1644201816782.3bcef11c.png",y="/assets/1644201840858.35f0e83e.png",v=JSON.parse('{"title":"使用 JSDoc 获得更好的类型提示","description":"","frontmatter":{"title":"使用 JSDoc 获得更好的类型提示","date":"2021-07-06T10:30:24.000Z","tags":["VSCode","JavaScript"]},"headers":[],"relativePath":"post/2021-07-06.md","filePath":"post/2021-07-06.md"}'),i={name:"post/2021-07-06.md"},D={id:"frontmatter-title",tabindex:"-1"},A=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),E=r('<p>JSDoc 是适用于 JavaScript 的 API 文档生成工具,可以识别特定的标记语法编写的注释来生成可读性较好的文档</p><p><img src="'+c+'" alt=""></p><h2 id="vs-code-对-jsdoc-的支持" tabindex="-1">VS Code 对 JSDoc 的支持 <a class="header-anchor" href="#vs-code-对-jsdoc-的支持" aria-label="Permalink to &quot;VS Code 对 JSDoc 的支持&quot;">​</a></h2><p>VS Code 能够理解大部分的 JSDoc 注释并且能够根据这些注释提供智能补全的功能。你甚至可以利用 JSDoc 提供的类型信息对你的 JS 进行类型检查 <img src="'+t+`" alt=""></p><h2 id="jsdoc-使用" tabindex="-1">JSDoc 使用 <a class="header-anchor" href="#jsdoc-使用" aria-label="Permalink to &quot;JSDoc 使用&quot;">​</a></h2><ol><li><p>@type 使用@type 标签来引用一个类型名(原始类型/TypeScript 中定义的类型/或者&quot;@typedef&quot;标签)</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string | number}</span><span style="color:#6A737D;"> 联合类型</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> s;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Window}</span><span style="color:#6A737D;"> dom提供的类型 */</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> win;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Array&lt;number&gt;}</span><span style="color:#6A737D;"> 数组*/</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> nums;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{{ a: string, b: number }}</span><span style="color:#6A737D;"> 复杂类型 */</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> var9;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string | number}</span><span style="color:#6A737D;"> 联合类型</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{Window}</span><span style="color:#6A737D;"> dom提供的类型 */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> win;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{Array&lt;number&gt;}</span><span style="color:#6A737D;"> 数组*/</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> nums;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{{ a: string, b: number }}</span><span style="color:#6A737D;"> 复杂类型 */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> var9;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>@param @returns</p><p>@param 使用和@type 相同的语法,但是需要添加参数名。将参数声明在中括号中可以使参数作为可选参数。使用@returns 来声明函数返回的类型</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 参数可以用多种语法来声明</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;">  </span><span style="color:#E1E4E8;">p1</span><span style="color:#6A737D;"> - 字符串参数</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string=}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">p2</span><span style="color:#6A737D;"> - 可选参数(Closure syntax)</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">[p3]</span><span style="color:#6A737D;"> - 另一个可选参数 (JSDoc syntax).</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">[p4</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">&quot;test&quot;]</span><span style="color:#6A737D;"> - 有默认值的可选参数</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> 返回值</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">stringsStringStrings</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">p1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">p2</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">p3</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">p4</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 参数可以用多种语法来声明</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;">  </span><span style="color:#24292E;">p1</span><span style="color:#6A737D;"> - 字符串参数</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string=}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">p2</span><span style="color:#6A737D;"> - 可选参数(Closure syntax)</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">[p3]</span><span style="color:#6A737D;"> - 另一个可选参数 (JSDoc syntax).</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">[p4</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">&quot;test&quot;]</span><span style="color:#6A737D;"> - 有默认值的可选参数</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> 返回值</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stringsStringStrings</span><span style="color:#24292E;">(</span><span style="color:#E36209;">p1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">p2</span><span style="color:#24292E;">, </span><span style="color:#E36209;">p3</span><span style="color:#24292E;">, </span><span style="color:#E36209;">p4</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>@typedef @callback @param @typedef 可以用来定义更复杂的类型。语法和@param 类似</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@typedef</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{object}</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">SpecialType1</span><span style="color:#6A737D;"> - 创建新的类型并命名为 &#39;SpecialType&#39;</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@property</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">prop1</span><span style="color:#6A737D;"> - SpecialType的字符串属性</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@property</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">prop2</span><span style="color:#6A737D;"> - SpecialType的数字属性</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@property</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number=}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">prop3</span><span style="color:#6A737D;"> - SpecialType的可选数字属性</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{SpecialType1}</span><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> specialTypeObject1;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@typedef</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{object}</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">SpecialType1</span><span style="color:#6A737D;"> - 创建新的类型并命名为 &#39;SpecialType&#39;</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@property</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">prop1</span><span style="color:#6A737D;"> - SpecialType的字符串属性</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@property</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">prop2</span><span style="color:#6A737D;"> - SpecialType的数字属性</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@property</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number=}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">prop3</span><span style="color:#6A737D;"> - SpecialType的可选数字属性</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{SpecialType1}</span><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> specialTypeObject1;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>@param 可以使用类似的语法来定义一次性使用的类型。与@typedef 不同的是嵌套属性名必须以参数名作为前缀</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Object}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">options</span><span style="color:#6A737D;"> - The shape is the same as SpecialType above</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">options.prop1</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">options.prop2</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number=}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">options.prop3</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">[options.prop4]</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">[options.prop5</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">42]</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">special</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (options.prop4 </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1001</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> options.prop5;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{Object}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">options</span><span style="color:#6A737D;"> - The shape is the same as SpecialType above</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">options.prop1</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">options.prop2</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number=}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">options.prop3</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">[options.prop4]</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">[options.prop5</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">42]</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">special</span><span style="color:#24292E;">(</span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (options.prop4 </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1001</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> options.prop5;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>@callback 和@typedef 类似,但是它是定义函数类型而不是对象类型</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@callback</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">Predicate</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">data</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">[index]</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Predicate}</span><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(s.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@callback</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">Predicate</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">data</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">[index]</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{boolean}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{Predicate}</span><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ok</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">s</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(s.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>当然,这些类型都可以在单行@typedef 中使用 TypeScript 语法来声明</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@typedef</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{{ prop1: string, prop2: string, prop3?: number }}</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">SpecialType</span><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@typedef</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{(data: string, index?: number) =&gt; boolean}</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">Predicate</span><span style="color:#6A737D;"> */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@typedef</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{{ prop1: string, prop2: string, prop3?: number }}</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">SpecialType</span><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@typedef</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{(data: string, index?: number) =&gt; boolean}</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">Predicate</span><span style="color:#6A737D;"> */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>@ts-check</p><p>说到底,JSDoc 只是更友好的类型提示工具，并不会对类型进行检查。VS Code 针对 TS 有类型检查,但是这对 JS 文件默认是不启用的。可以在 JS 文件第一行添加//@ts-check 开启类型错误提示 <img src="`+y+'" alt=""></p></li></ol><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://jsdoc.app/" target="_blank" rel="noreferrer">JSDoc 官网</a></li><li><a href="https://code.visualstudio.com/docs/languages/javascript#_jsdoc-support" target="_blank" rel="noreferrer">VS Code 对 JSDoc 的支持</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html" target="_blank" rel="noreferrer">TypeScript 官网的 JSDoc 支持文档</a></li></ul>',8);function b(n,d,u,m,F,g){return p(),l("div",null,[s("h1",D,[o(e(n.$frontmatter.title)+" ",1),A]),E])}const C=a(i,[["render",b]]);export{v as __pageData,C as default};
